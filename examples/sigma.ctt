module sigma where

-- import deppath
import equiv

-- application of this fact

sig (A : U) (P : A -> U) : U = (x : A) * P x

lemIdSig (A:U) (B : A -> U) (t u : sig A B) :
 Id U (Id (sig A B) t u) ((p : Id A t.1 u.1) * IdP (<i> B (p @ i)) t.2 u.2) =
  isoId T0 T1 f g s t where
   T0 : U = Id (sig A B) t u
   T1 : U = (p:Id A t.1 u.1) * IdP (<i> B (p@i)) t.2 u.2
   f (q:T0) : T1 = (<i> (q@i).1,<i> (q@i).2)
   g (z:T1) : T0 = <i>(z.1 @i,z.2 @i)
   s (z:T1) : Id T1 (f (g z)) z = refl T1 z
   t (q:T0) : Id T0 (g (f q)) q = refl T0 q

lemIdAnd (A B : U) (t u : and A B) :
  Id U (Id (and A B) t u) (and (Id A t.1 u.1) (Id B t.2 u.2)) = lemIdSig A (\(_ : A) -> B) t u

lem (A:U) (P:A->U) (pP:(x:A) -> prop (P x)) (u v:(x:A) * P x) (p:Id A u.1 v.1) :
 Id ((x:A)*P x) u v = <i>(p@i,(lemPropF A P pP u.1 v.1 p u.2 v.2)@i)

propSig (A:U) (B:A-> U) (pA:prop A) (pB : (x:A) -> prop (B x)) (t u : sig A B) : Id (sig A B) t u
 = lem A B pB t u (pA t.1 u.1)

lemTransp (A:U) (a:A) : Id A a (transport (<_>A) a) = fill (<_>A) a []
--  <i>genComp (<_>A) a [(i=0) -> <_>a]

funDepTr (A:U) (P:A->U) (a0 :A) : (a1:A) (p:Id A a0 a1) (u0:P a0) (u1:P a1) ->
             Id U (IdP (<i> P (p@i)) u0 u1) (Id (P a1) (transport (<i> P (p@i)) u0) u1) =
 J A a0 (\ (a1:A) (p:Id A a0 a1) -> (u0:P a0) (u1:P a1) ->
             Id U (IdP (<i> P (p@i)) u0 u1) (Id (P a1) (transport (<i> P (p@i)) u0) u1)) rem
 where rem (u0 u1:P a0) : Id U (Id (P a0) u0 u1) (Id (P a0) (transport (<_>P a0) u0) u1) =
         <i>Id (P a0) (lemTransp (P a0) u0@i) u1

funDepTr (A0:U) : (A1:U) (P:Id U A0 A1) (u0:A0) (u1:A1) ->
             Id U (IdP P u0 u1) (Id A1 (transport P u0) u1) =
 J U A0 (\ (A1:U) (P:Id U A0 A1) -> (u0:A0) (u1:A1) -> Id U (IdP P u0 u1) (Id A1 (transport P u0) u1)) rem
 where rem (u0 u1:A0) : Id U (Id A0 u0 u1) (Id A0 (transport (<_>A0) u0) u1) =
         <i>Id A0 (lemTransp A0 u0@i) u1

lem2 (A:U) (B:A-> U) (t u : sig A B) (p:Id A t.1 u.1) :
  Id U  (IdP (<i>B (p@i)) t.2 u.2) (Id (B u.1) (transport (<i>B (p@i)) t.2) u.2) =
    funDepTr (B t.1) (B u.1) P t.2 u.2
 where P : Id U (B t.1) (B u.1) = <i>B (p@i)
       T0 : U = IdP P t.2 u.2
       T1 : U = Id (B u.1) (transport P t.2) u.2

corSigProp (A:U) (B:A-> U) (pB : (x:A) -> prop (B x)) (t u : sig A B) (p:Id A t.1 u.1) :
  prop (IdP (<i>B (p@i)) t.2 u.2) = substInv U prop T0 T1 rem rem1
 where P : Id U (B t.1) (B u.1) = <i>B (p@i)
       T0 : U = IdP P t.2 u.2
       T1 : U = Id (B u.1) (transport P t.2) u.2
       rem : Id U T0 T1 = lem2 A B t u p -- funDepTr (B t.1) (B u.1) P t.2 u.2
       v2 : B u.1 = transport P t.2
       rem1 : prop T1 = propSet (B u.1) (pB u.1) v2 u.2

corSigSet (A:U) (B:A-> U) (sB : (x:A) -> set (B x)) (t u : sig A B) (p:Id A t.1 u.1) :
  prop (IdP (<i>B (p@i)) t.2 u.2) = substInv U prop T0 T1 rem rem1
 where P : Id U (B t.1) (B u.1) = <i>B (p@i)
       T0 : U = IdP P t.2 u.2
       T1 : U = Id (B u.1) (transport P t.2) u.2
       rem : Id U T0 T1 = lem2 A B t u p -- funDepTr (B t.1) (B u.1) P t.2 u.2
       v2 : B u.1 = transport P t.2
       rem1 : prop T1 = sB u.1 v2 u.2

setSig (A:U) (B:A-> U) (sA: set A) (sB : (x:A) -> set (B x)) (t u : sig A B) : prop (Id (sig A B) t u) =
  substInv U prop (Id (sig A B) t u) ((p:T) * C p) rem3 rem2
 where
   T : U = Id A t.1 u.1
   C (p:T) : U = IdP (<i> B (p@i)) t.2 u.2
   rem (p : T) : prop (C p) = corSigSet A B sB t u p
   rem1 : prop T = sA t.1 u.1
   rem2 : prop ((p:T) * C p) = propSig T C rem1 rem
   rem3 : Id U (Id (sig A B) t u) ((p:T) * C p) = lemIdSig A B t u

corSigGroupoid (A:U) (B:A-> U) (gB : (x:A) -> groupoid (B x)) (t u : sig A B) (p:Id A t.1 u.1) :
  set (IdP (<i>B (p@i)) t.2 u.2) = substInv U set T0 T1 rem rem1
 where P : Id U (B t.1) (B u.1) = <i>B (p@i)
       T0 : U = IdP P t.2 u.2
       T1 : U = Id (B u.1) (transport P t.2) u.2
       rem : Id U T0 T1 = lem2 A B t u p -- funDepTr (B t.1) (B u.1) P t.2 u.2
       v2 : B u.1 = transport P t.2
       rem1 : set T1 = gB u.1 v2 u.2

groupoidSig (A:U) (B:A-> U) (gA: groupoid A) (gB : (x:A) -> groupoid (B x)) (t u : sig A B) : set (Id (sig A B) t u) =
  substInv U set (Id (sig A B) t u) ((p:T) * C p) rem3 rem2
 where
   T : U = Id A t.1 u.1
   C (p:T) : U = IdP (<i> B (p@i)) t.2 u.2
   rem (p : T) : set (C p) = corSigGroupoid A B gB t u p
   rem1 : set T = gA t.1 u.1
   rem2 : set ((p:T) * C p) = setSig T C rem1 rem
   rem3 : Id U (Id (sig A B) t u) ((p:T) * C p) = lemIdSig A B t u

lemContr (A:U) (pA:prop A) (a:A) : isContr A = (a,rem)
 where rem (y:A) : Id A a y = pA a y

lem3 (A:U) (B:A-> U) (pB : (x:A) -> prop (B x)) (t u : sig A B) (p:Id A t.1 u.1) :
  isContr (IdP (<i>B (p@i)) t.2 u.2) = lemContr T0 (substInv U prop T0 T1 rem rem1) rem2
 where P : Id U (B t.1) (B u.1) = <i>B (p@i)
       T0 : U = IdP P t.2 u.2
       T1 : U = Id (B u.1) (transport P t.2) u.2
       rem : Id U T0 T1 = funDepTr (B t.1) (B u.1) P t.2 u.2 -- lem2 A B t u p --
       v2 : B u.1 = transport P t.2
       rem1 : prop T1 = propSet (B u.1) (pB u.1) v2 u.2
       rem2 : T0 = transport (<i>rem@-i) (pB u.1 v2 u.2)

lem6 (A:U) (P:A-> U) (cA:(x:A) -> isContr (P x)) : Id U ((x:A)*P x) A = isoId T A f g t s
 where
   T : U = (x:A) * P x
   f (z:T) : A = z.1
   g (x:A) : T = (x,(cA x).1)
   s (z:T) : Id T (g (f z)) z = <i>(z.1,((cA z.1).2 z.2)@ i)
   t (x:A) : Id A (f (g x)) x = refl A x

lemSigProp (A:U) (B:A-> U) (pB : (x:A) -> prop (B x)) (t u : sig A B) : Id U (Id (sig A B) t u) (Id A t.1 u.1) =
 compId U (Id (sig A B) t u) ((p:Id A t.1 u.1) * IdP (<i> B (p@i)) t.2 u.2) (Id A t.1 u.1) rem2 rem1
 where
   T : U = Id A t.1 u.1
   C (p:T) : U = IdP (<i> B (p@i)) t.2 u.2
   rem (p : T) : isContr (C p) = lem3 A B pB t u p
   rem1 : Id U ((p:T) * C p) T = lem6 T C rem
   rem2 : Id U (Id (sig A B) t u) ((p:T) * C p) = lemIdSig A B t u

setGroupoid (A:U) (sA:set A) (a0 a1:A) : set (Id A a0 a1) = propSet (Id A a0 a1) (sA a0 a1)

propGroupoid (A:U) (pA: prop A) : groupoid A = setGroupoid A (propSet A pA)

lemSigProj (A : U) (B : A -> U) (t u : sig A B) (p : Id (sig A B) t u) : Id A t.1 u.1 =
  <i> (p @ i).1
