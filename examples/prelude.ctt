module prelude where

-- Identity types

Id (A : U) (a0 a1 : A) : U = IdP (<i> A) a0 a1

refl (A : U) (a : A) : Id A a a = <i> a

testEta (A : U) (a b : A) (p : Id A a b) : Id (Id A a b) p p = refl (Id A a b) (<i> p @ i)

mapOnPath (A B : U) (f : A -> B) (a b : A)
          (p : Id A a b) : Id B (f a) (f b) = <i> f (p @ i)

funExt (A : U) (B : A -> U) (f g : (x : A) -> B x)
       (p : (x : A) -> Id (B x) (f x) (g x)) :
       Id ((y : A) -> B y) f g = <i> \(a : A) -> (p a) @ i

-- Transport can be defined using comp
trans (A B : U) (p : Id U A B) (a : A) : B = comp p a []

-- subst can be defined using trans:
substTrans (A : U) (P : A -> U) (a b : A) (p : Id A a b) (e : P a) : P b =
  trans (P a) (P b) (mapOnPath A U P a b p) e

subst (A : U) (P : A -> U) (a b : A) (p : Id A a b) (e : P a) : P b =
  transport (mapOnPath A U P a b p) e

substEq (A : U) (P : A -> U) (a : A) (e : P a)
  : Id (P a) e (subst A P a a (refl A a) e) =
  fill (<_> P a) e []

substInv (A : U) (P : A -> U) (a b : A) (p : Id A a b) : P b -> P a =
 subst A P b a (<i> p @ -i)

singl (A : U) (a : A) : U = (x : A) * Id A a x

contrSingl (A : U) (a b : A) (p : Id A a b) :
  Id (singl A a) (a,refl A a) (b,p) = <i> (p @ i,<j> p @ i/\j)

J (A : U) (a : A) (C : (x : A) -> Id A a x -> U)
  (d : C a (refl A a)) (x : A) (p : Id A a x) : C x p =
    subst (singl A a) T (a, refl A a) (x, p) (contrSingl A a x p) d
      where T (z : singl A a) : U = C (z.1) (z.2)

JEq (A : U) (a : A) (C : (x : A) -> Id A a x -> U) (d : C a (refl A a))
  : Id (C a (refl A a)) d (J A a C d a (refl A a)) =
  substEq (singl A a) T (a, refl A a) d
    where T (z : singl A a) : U = C (z.1) (z.2)


inv (A : U) (a b : A) (p : Id A a b) : Id A b a = <i> p @ -i

compId (A : U) (a b c : A) (p : Id A a b) (q : Id A b c) : Id A a c =
  <i> comp (<_>A) (p @ i) [ (i = 1) -> q, (i=0) -> <_> a ]

compIdInv (A : U) (a b c : A) (p : Id A a b) (q : Id A c b) : Id A a c =
  compId A a b c p (inv A c b q)

compIdInv' (A : U) (a b c : A) (p : Id A b a) (q : Id A b c) : Id A a c =
  compId A a b c (inv A b a p) q

compId' (A : U) (a b c : A) (p : Id A a b) (q : Id A b c) : Id A a c =
  subst A (Id A a) b c q p

compId'' (A : U) (a b : A) (p : Id A a b) : (c : A) -> (q : Id A b c) -> Id A a c =
  J A a ( \ (b : A) (p : Id A a b) -> (c : A) -> (q : Id A b c) -> Id A a c) rem b p
    where rem (c : A) (p : Id A a c) : Id A a c = p

compUp (A : U) (a a' b b' : A)
       (p : Id A a a') (q : Id A b b') (r : Id A a b) : Id A a' b' =
  <i> comp (<_>A) (r @ i) [(i = 0) -> p, (i = 1) -> q]

compDown (A : U) (a a' b b' : A)
         (p : Id A a a') (q: Id A b b') : Id A a' b' -> Id A a b =
 compUp A a' a b' b (inv A a a' p) (inv A b b' q)

lemCompInv (A:U) (a b c:A) (p:Id A a b) (q:Id A b c)
  : Id (Id A a b) (compId A a c b (compId A a b c p q) (inv A b c q)) p =
  <j i> comp (<_>A)
          ((fill (<_>A) (p @ i) [(i=0) -> <_>a, (i=1) -> q]) @ -j)
          [ (i=0) -> <_> a
          , (i=1) -> <k> q @ - (j \/  k)
          , (j=0) -> fill (<_>A) ((compId A a b c p q @ i))
                       [(i=0) -> <_>a, (i=1) -> <k> q @ -k ]
          , (j=1) -> <_> p @ i
          ]

lemInv (A:U) (a b:A) (p:Id A a b) : Id (Id A b b) (compId A b a b (inv A a b p) p)  (refl A b) =
   <j i> comp (<_>A) (p @ (-i \/ j)) [(i=0) -> <l>b, (j=1) -> <l>b, (i=1) -> <k> p @ (j \/ k)]

test0 (A : U) (a b : A) (p : Id A a b) : Id A a a = refl A (p @ 0)
test1 (A : U) (a b : A) (p : Id A a b) : Id A b b = refl A (p @ 1)

-- compEmpty (A : U) (a b : A) (p : Id A a b) : Id A a b =
--   <i> comp A (p @ i) [ ]

kan (A : U) (a b c d : A) (p : Id A a b) (q : Id A a c)
                          (r : Id A b d) : Id A c d =
  <i> comp (<_>A) (p @ i) [ (i = 0) -> q, (i = 1) -> r ]

lemSimpl (A : U) (a b c : A) (p : Id A a b) (q q' : Id A b c)
  (s : Id (Id A a c) (compId A a b c p q) (compId A a b c p q')) :
  Id (Id A b c) q q' =
   <j k> comp (<_> A) a
           [ (j = 0) -> <i> comp (<_> A) (p @ i)
                              [ (k = 0) -> <l> p @ i
                              , (i = 0) -> <l> a
                              , (i = 1) -> <l> q @ k /\ l]
           , (j = 1) -> <i> comp (<_> A) (p @ i)
                              [ (k = 0) -> <l> p @ i
                              , (i = 0) -> <l> a
                              , (i = 1) -> <l> q' @ k /\ l]
           , (k = 0)  -> p
           , (k = 1)  -> s @ j ]

idfun (A : U) (a : A) : A = a

constfun (A : U) (B : U) (x : B) (_ : A) : B = x

--         u
--    a0 -----> a1
--    |         |
-- r0 |         | r1
--    |         |
--    V         V
--    b0 -----> b1
--         v
Square (A : U) (a0 a1 b0 b1 : A)
               (u : Id A a0 a1) (v : Id A b0 b1)
               (r0 : Id A a0 b0) (r1 : Id A a1 b1) : U
  = IdP (<i> (IdP (<j> A) (u @ i) (v @ i))) r0 r1

constSquare (A : U) (a : A) (p : Id A a a) : Square A a a a a p p p p =
  <i j> comp (<_>A) a
     [(i = 0) -> <k> p @ (j \/ - k),
      (i = 1) -> <k> p @ (j /\ k),
      (j = 0) -> <k> p @ (i \/ - k),
      (j = 1) -> <k> p @ (i /\ k)]

prop (A : U) : U = (a b : A) -> Id A a b
set (A : U) : U = (a b : A) -> prop (Id A a b)
groupoid (A : U) : U = (a b : A) -> set (Id A a b)
Prop : U = (A : U) * prop A

propSet (A : U) (h : prop A) (a b : A) (p q : Id A a b) : Id (Id A a b) p q =
 <j i> comp (<_>A) a [ (i=0) -> h a a
                , (i=1) -> h a b
                , (j=0) -> h a (p @ i)
                , (j=1) -> h a (q @ i)]

propIsProp (A : U) (f g : prop A) : Id (prop A) f g =
 <i> \(a b :A) -> (propSet A f a b (f a b) (g a b)) @ i

setIsProp (A : U) (f g : set A) : Id (set A) f g =
 <i> \(a b :A) -> (propIsProp (Id A a b) (f a b) (g a b)) @ i

IdS (A : U) (P : A -> U) (a0 a1 : A) (p : Id A a0 a1) (u0 : P a0) (u1 : P a1) : U =
  IdP (<i> P (p @ i)) u0 u1

lemProp (A : U) (h : A -> prop A) : prop A = \ (a : A) -> h a a

propPi (A : U) (B : A -> U) (h : (x : A) -> prop (B x))
       (f0 f1 : (x : A) -> B x) : Id ((x : A) -> B x) f0 f1
  = <i> \ (x:A) -> (h x (f0 x) (f1 x)) @ i

lemPropF (A : U) (P : A -> U) (pP : (x : A) -> prop (P x)) (a :A) :
          (a1 : A) (p : Id A a a1) (b0 : P a) (b1 : P a1) -> IdP (<i>P (p@i)) b0 b1 =
 J A a (\ (a1 : A) (p : Id A a a1) ->
          (b0 : P a) (b1 : P a1) -> IdP (<i>P (p@i)) b0 b1)
   rem
 where rem : (b0 b1:P a) -> Id (P a) b0 b1 = pP a

lemSig (A : U) (B : A -> U) (pB : (x : A) -> prop (B x))
       (u v : (x:A) * B x) (p : Id A u.1 v.1) :
       Id ((x:A) * B x) u v =
  <i> (p@i,(lemPropF A B pB u.1 v.1 p u.2 v.2)@i)

propSig (A : U) (B : A -> U) (pA : prop A)
        (pB : (x : A) -> prop (B x)) (t u : (x:A) * B x) :
        Id ((x:A) * B x) t u =
  lemSig A B pB t u (pA t.1 u.1)

isContr (A : U) : U = (x : A) * ((y : A) -> Id A x y)

propIsContr (A : U) : prop (isContr A) = lemProp (isContr A) rem
  where
    rem (t : isContr A) : prop (isContr A) = propSig A T pA pB
      where
        T (x : A) : U = (y : A) -> Id A x y
        pA (x y : A) : Id A x y = compId A x t.1 y (<i> t.2 x @ -i) (t.2 y)
        pB (x : A) : prop (T x) =
          propPi A (\ (y : A) -> Id A x y) (propSet A pA x)

-- Basic data types

data N0 =

efq (A : U) : N0 -> A = split{}
neg (A : U) : U = A -> N0

data Unit = tt

propUnit : prop Unit = rem
 where rem1 : (x:Unit) -> Id Unit x tt = split tt -> refl Unit tt
       rem (x:Unit) : (y:Unit) -> Id Unit x y = split tt -> rem1 x

setUnit : set Unit = propSet Unit propUnit

data or (A B : U) = inl (a : A)
                  | inr (b : B)

stable (A:U) : U = neg (neg A) -> A

const (A : U) (f : A -> A) : U = (x y : A) -> Id A (f x) (f y)

exConst (A : U) : U = (f:A -> A) * const A f


propN0 : prop N0 = \ (x y:N0) -> efq (Id N0 x y) x

propNeg (A:U) : prop (neg A) = \ (f g:neg A) -> <i>\(x:A) -> (propN0 (f x) (g x))@i

dNeg (A:U) (a:A) : neg (neg A) = \ (h : neg A) -> h a

dec (A : U) : U = or A (neg A)

decEqCong (A B : U) (f : A -> B) (g : B -> A) : dec A -> dec B = split
  inl a -> inl (f a)
  inr h -> inr (\ (b:B) -> h (g b))

decStable (A:U) : dec A -> stable A = split
 inl a -> \ (h :neg (neg A)) -> a
 inr b -> \ (h :neg (neg A)) -> efq A (h b)

decConst (A : U) : dec A -> exConst A = split
  inl a -> (\ (x:A)  -> a, \ (x y:A) -> refl A a)
  inr h -> (\ (x:A) -> x, \ (x y:A) -> efq (Id A x y) (h x))

stableConst (A : U) (sA: stable A) : exConst A =
 (\ (x:A) -> sA (dNeg A x),\ (x y:A) -> <i>sA (propNeg (neg A) (dNeg A x) (dNeg A y) @ i))

discrete (A : U) : U = (a b : A) -> dec (Id A a b)

injective (A B : U) (f : A -> B) : U =
  (a0 a1 : A) -> Id B (f a0) (f a1) -> Id A a0 a1

and (A B : U) : U = (_ : A) * B


isoId (A B : U) (f : A -> B) (g : B -> A)
      (s : (y : B) -> Id B (f (g y)) y)
      (t : (x : A) -> Id A (g (f x)) x) : Id U A B =
      <i> glue B [ (i = 0) -> (A,f,g,s,t)
                 , (i = 1) -> (B,idfun B,idfun B,refl B,refl B) ]

-- propDec (A : Prop) : prop (dec A)
propDec (A : Prop) : (s t : dec A.1) -> Id (dec A.1) s t = split
  inl sa -> \(t : dec A.1) -> propDecHelper sa t
    where
    propDecHelper (sa : A.1) : (t : dec A.1) -> Id (dec A.1) (inl sa) t = split
      inl ta -> <i> inl (A.2 sa ta @ i)
      inr tb -> efq (Id (dec A.1) (inl sa) (inr tb)) (tb sa)
  inr sb -> \(t : dec A.1) -> propDecHelper sb t
    where
    propDecHelper (sb : A.1 -> N0) : (t : dec A.1) -> Id (dec A.1) (inr sb) t = split
      inl ta -> efq (Id (dec A.1) (inr sb) (inl ta)) (sb ta)
      inr tb -> <i> inr (propNeg A.1 sb tb @ i)

inhabitedPropIsUnit (A : Prop) (x : A.1) : Id U A.1 Unit =
  isoId A.1 Unit (constfun A.1 Unit tt) (constfun Unit A.1 x) (\(y : Unit) -> propUnit tt y) (\(y : A.1) -> A.2 x y)

uninhabitedPropIsN0 (A : Prop) (f : A.1 -> N0) : Id U A.1 N0 =
  isoId A.1 N0 f (efq A.1) (\(y : N0) -> efq (Id N0 (f (efq A.1 y)) y) y) (\(y : A.1) -> A.2 (efq A.1 (f y)) y)
