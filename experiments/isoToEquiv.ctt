-- This file contains a proof of the isoToId using the old version of
-- equivalence
module isoToEquiv where

import equiv

lemIso (A B : U) (f : A -> B) (g : B -> A)
       (s : (y : B) -> Id B (f (g y)) y)
       (t : (x : A) -> Id A (g (f x)) x)
       (y : B) (x0 x1 : A) (p0 : Id B (f x0) y) (p1 : Id B (f x1) y) :
       Id (fiber A B f y) (x0,p0) (x1,p1) = <i> (p @ i,sq1 @ i)
  where
    rem0 : Id A x0 (g y) =
      <i> comp (<_> A) (g (p0 @ i)) [ (i = 0) -> t x0, (i = 1) -> <_> g y ]

    rem1 : Id A x1 (g y) =
      <i> comp (<_> A) (g (p1 @ i)) [ (i = 0) -> t x1, (i = 1) -> <_> g y ]

    p : Id A x0 x1 =
     <i> comp (<_> A) (g y) [ (i = 0) -> <j> rem0 @ -j
                            , (i = 1) -> <j> rem1 @ -j ]


    fill0 : Square A (g (f x0)) (g y) x0 (g y)
                     (<i> g (p0 @ i)) rem0 (t x0) (<i> g y) =
      <i j> comp (<_> A) (g (p0 @ i)) [ (i = 0) -> <k> t x0 @ j /\ k
                                      , (i = 1) -> <_> g y
                                      , (j = 0) -> <_> g (p0 @ i) ]

    fill1 : Square A (g (f x1)) (g y) x1 (g y)
                     (<i> g (p1 @ i)) rem1 (t x1) (<i> g y) =
      <i j> comp (<_> A) (g (p1 @ i)) [ (i = 0) -> <k> t x1 @ j /\ k
                                      , (i = 1) -> <_> g y
                                      , (j = 0) -> <_> g (p1 @ i) ]

    fill2 : Square A x0 x1 (g y) (g y)
                     p (<_> g y) rem0 rem1 =
      <i j> comp (<_> A) (g y) [ (i = 0) -> <k> rem0 @ j \/ -k
                               , (i = 1) -> <k> rem1 @ j \/ -k
                               , (j = 1) -> <_> g y ]

    sq : Square A (g (f x0)) (g (f x1)) (g y) (g y)
                  (<i> g (f (p @ i))) (<i> g y)
                  (<j> g (p0 @ j)) (<j> g (p1 @ j)) =
      <i j> comp (<_> A) (fill2 @ i @ j) [ (i = 0) -> <k> fill0 @ j @ -k
                                         , (i = 1) -> <k> fill1 @ j @ -k
                                         , (j = 1) -> <_> g y
                                         , (j = 0) -> <k> t (p @ i) @ -k ]

    sq1 : Square B (f x0) (f x1) y y
                   (<i> f (p @ i)) (<_> y) p0 p1 =
      <i j> comp (<_> B) (f (sq @ i @j)) [ (i = 0) -> s (p0 @ j)
                                         , (i = 1) -> s (p1 @ j)
                                         , (j = 0) -> s (f (p @ i))
                                         , (j = 1) -> s y ]

isoToEquiv (A B : U) (f : A -> B) (g : B -> A)
          (s : (y : B) -> Id B (f (g y)) y)
          (t : (x : A) -> Id A (g (f x)) x) : isEquiv A B f = (fCenter,fIsCenter)
  where
    fCenter (y : B) : fiber A B f y = (g y,s y)
    fIsCenter (y : B) (w : fiber A B f y) : Id (fiber A B f y) (fCenter y) w =
      lemIso A B f g s t y (fCenter y).1 w.1 (fCenter y).2 w.2


-- OLD CODE:
-- lemIso with equalities on other direction:
-- lemIso (A B : U) (f : A -> B) (g : B -> A)
--        (s : (y:B) -> Id B (f (g y)) y)
--        (t : (x:A) -> Id A (g (f x)) x)
--        (y:B) (x0 x1:A) (p0 : Id B y (f x0)) (p1 : Id B y (f x1)) :
--        Id ((x:A) * Id B y (f x)) (x0,p0) (x1,p1) = <i> (p @ i, sq1 @ i)
--     where
--  rem0 : Id A (g y) x0 =
--    <i> comp (<_> A) (g (p0 @ i)) [ (i = 0) -> <_> g y, (i = 1) -> t x0 ]
--  rem1 : Id A (g y) x1 =
--    <i> comp (<_> A) (g (p1 @ i)) [ (i = 0) -> <_> g y, (i = 1) -> t x1 ]
--  p : Id A x0 x1 = <i> comp (<_> A) (g y) [ (i = 0) -> rem0, (i = 1) -> rem1 ]

--  fill0 : Square A (g y) (g (f x0)) (<i> g (p0 @ i)) (g y) x0 rem0 (<i> g y) (t x0) =
--     <i j> comp (<_> A) (g (p0@i)) [ (i = 0) -> <_> g y
--                                   , (i = 1) -> <k> t x0 @ j /\ k
--                                   , (j = 0) -> <_> g (p0 @ i) ]

--  fill1 : Square A (g y) (g (f x1)) (<i> g (p1 @ i)) (g y) x1 rem1 (<i> g y) (t x1) =
--     <i j> comp (<_> A) (g (p1@i)) [ (i = 0) -> <_> g y
--                                   , (i = 1) -> <k> t x1 @ j /\ k
--                                   , (j = 0) -> <_> g (p1 @ i) ]

--  fill2 : Square A (g y) (g y) (<_> g y) x0 x1 p rem0 rem1 =
--    <i j> comp (<_> A) (g y) [ (i = 0) -> <k> rem0 @ j /\ k
--                             , (i = 1) -> <k> rem1 @ j /\ k
--                             , (j = 0) -> <_> g y ]

--  sq : Square A (g y) (g y) (<_> g y) (g (f x0)) (g (f x1)) (<i> g (f (p @ i)))
--                (<i> g (p0 @ i)) (<i> g (p1 @ i)) =
--   <i j> comp (<_> A) (fill2 @ i @ j) [ (i = 0) -> <k> fill0 @ j @ -k
--                                      , (i = 1) -> <k> fill1 @ j @ -k
--                                      , (j = 0) -> <_> g y
--                                      , (j = 1) -> <k> t (p @ i) @ -k ]

--  sq1 : Square B y y (<_> y) (f x0) (f x1) (<i> f (p @ i)) p0 p1 =
--   <i j> comp (<_> B) (f (sq @ i @j)) [ (i = 0) -> s (p0 @ j)
--                                      , (i = 1) -> s (p1 @ j)
--                                      , (j = 0) -> s y
--                                      , (j = 1) -> s (f (p @ i)) ]

-- -- special case

-- corrIso (A B : U) (f : A -> B) (g : B -> A)
--         (s : (y:B) -> Id B (f (g y)) y)
--         (t : (x:A) -> Id A (g (f x)) x)
--         (x0:A) :
--         Id ((x:A) * Id B (f x0) (f x)) (x0,refl B (f x0)) (g (f x0),<i>((s (f x0))@-i)) =
--  lemIso A B f g s t (f x0) x0 (g (f x0)) (refl B (f x0)) (<i>((s (f x0))@-i))
